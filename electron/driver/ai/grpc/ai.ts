/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ai.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace com.acreom.ai {
    export class InitializeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            model_path?: string;
            embedding_path?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("model_path" in data && data.model_path != undefined) {
                    this.model_path = data.model_path;
                }
                if ("embedding_path" in data && data.embedding_path != undefined) {
                    this.embedding_path = data.embedding_path;
                }
            }
        }
        get model_path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set model_path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get embedding_path() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set embedding_path(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            model_path?: string;
            embedding_path?: string;
        }): InitializeRequest {
            const message = new InitializeRequest({});
            if (data.model_path != null) {
                message.model_path = data.model_path;
            }
            if (data.embedding_path != null) {
                message.embedding_path = data.embedding_path;
            }
            return message;
        }
        toObject() {
            const data: {
                model_path?: string;
                embedding_path?: string;
            } = {};
            if (this.model_path != null) {
                data.model_path = this.model_path;
            }
            if (this.embedding_path != null) {
                data.embedding_path = this.embedding_path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.model_path.length)
                writer.writeString(1, this.model_path);
            if (this.embedding_path.length)
                writer.writeString(2, this.embedding_path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.model_path = reader.readString();
                        break;
                    case 2:
                        message.embedding_path = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitializeRequest {
            return InitializeRequest.deserialize(bytes);
        }
    }
    export class InitializeReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: string;
        }): InitializeReply {
            const message = new InitializeReply({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitializeReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitializeReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitializeReply {
            return InitializeReply.deserialize(bytes);
        }
    }
    export class EntityData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            content?: string;
        }): EntityData {
            const message = new EntityData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                content?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.content.length)
                writer.writeString(3, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EntityData {
            return EntityData.deserialize(bytes);
        }
    }
    export class IndexRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            vault_id?: string;
            action?: string;
            data?: EntityData[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("vault_id" in data && data.vault_id != undefined) {
                    this.vault_id = data.vault_id;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get vault_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set vault_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, EntityData, 3) as EntityData[];
        }
        set data(value: EntityData[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            vault_id?: string;
            action?: string;
            data?: ReturnType<typeof EntityData.prototype.toObject>[];
        }): IndexRequest {
            const message = new IndexRequest({});
            if (data.vault_id != null) {
                message.vault_id = data.vault_id;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.data != null) {
                message.data = data.data.map(item => EntityData.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                vault_id?: string;
                action?: string;
                data?: ReturnType<typeof EntityData.prototype.toObject>[];
            } = {};
            if (this.vault_id != null) {
                data.vault_id = this.vault_id;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.data != null) {
                data.data = this.data.map((item: EntityData) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.vault_id.length)
                writer.writeString(1, this.vault_id);
            if (this.action.length)
                writer.writeString(2, this.action);
            if (this.data.length)
                writer.writeRepeatedMessage(3, this.data, (item: EntityData) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.vault_id = reader.readString();
                        break;
                    case 2:
                        message.action = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 3, EntityData.deserialize(reader), EntityData));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexRequest {
            return IndexRequest.deserialize(bytes);
        }
    }
    export class IndexReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): IndexReply {
            const message = new IndexReply({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IndexReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IndexReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IndexReply {
            return IndexReply.deserialize(bytes);
        }
    }
    export class TaskRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: string;
            tasks?: string;
            context?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("tasks" in data && data.tasks != undefined) {
                    this.tasks = data.tasks;
                }
                if ("context" in data && data.context != undefined) {
                    this.context = data.context;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tasks() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tasks(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get context() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set context(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data?: string;
            tasks?: string;
            context?: string;
        }): TaskRequest {
            const message = new TaskRequest({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.tasks != null) {
                message.tasks = data.tasks;
            }
            if (data.context != null) {
                message.context = data.context;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: string;
                tasks?: string;
                context?: string;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.tasks != null) {
                data.tasks = this.tasks;
            }
            if (this.context != null) {
                data.context = this.context;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeString(1, this.data);
            if (this.tasks.length)
                writer.writeString(2, this.tasks);
            if (this.context.length)
                writer.writeString(3, this.context);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TaskRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readString();
                        break;
                    case 2:
                        message.tasks = reader.readString();
                        break;
                    case 3:
                        message.context = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TaskRequest {
            return TaskRequest.deserialize(bytes);
        }
    }
    export class metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
        }): metadata {
            const message = new metadata({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): metadata {
            return metadata.deserialize(bytes);
        }
    }
    export class TaskReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            text?: string;
            sourceDocuments?: metadata[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("sourceDocuments" in data && data.sourceDocuments != undefined) {
                    this.sourceDocuments = data.sourceDocuments;
                }
            }
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sourceDocuments() {
            return pb_1.Message.getRepeatedWrapperField(this, metadata, 2) as metadata[];
        }
        set sourceDocuments(value: metadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            text?: string;
            sourceDocuments?: ReturnType<typeof metadata.prototype.toObject>[];
        }): TaskReply {
            const message = new TaskReply({});
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.sourceDocuments != null) {
                message.sourceDocuments = data.sourceDocuments.map(item => metadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                text?: string;
                sourceDocuments?: ReturnType<typeof metadata.prototype.toObject>[];
            } = {};
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.sourceDocuments != null) {
                data.sourceDocuments = this.sourceDocuments.map((item: metadata) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.text.length)
                writer.writeString(1, this.text);
            if (this.sourceDocuments.length)
                writer.writeRepeatedMessage(2, this.sourceDocuments, (item: metadata) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TaskReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.sourceDocuments, () => pb_1.Message.addToRepeatedWrapperField(message, 2, metadata.deserialize(reader), metadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TaskReply {
            return TaskReply.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAIService {
        static definition = {
            Initialize: {
                path: "/com.acreom.ai.AI/Initialize",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InitializeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InitializeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InitializeReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InitializeReply.deserialize(new Uint8Array(bytes))
            },
            Index: {
                path: "/com.acreom.ai.AI/Index",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: IndexRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => IndexRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: IndexReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => IndexReply.deserialize(new Uint8Array(bytes))
            },
            Task: {
                path: "/com.acreom.ai.AI/Task",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: TaskRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TaskRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TaskReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TaskReply.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Initialize(call: grpc_1.ServerUnaryCall<InitializeRequest, InitializeReply>, callback: grpc_1.sendUnaryData<InitializeReply>): void;
        abstract Index(call: grpc_1.ServerUnaryCall<IndexRequest, IndexReply>, callback: grpc_1.sendUnaryData<IndexReply>): void;
        abstract Task(call: grpc_1.ServerWritableStream<TaskRequest, TaskReply>): void;
    }
    export class AIClient extends grpc_1.makeGenericClientConstructor(UnimplementedAIService.definition, "AI", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Initialize: GrpcUnaryServiceInterface<InitializeRequest, InitializeReply> = (message: InitializeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InitializeReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InitializeReply>, callback?: grpc_1.requestCallback<InitializeReply>): grpc_1.ClientUnaryCall => {
            return super.Initialize(message, metadata, options, callback);
        };
        Index: GrpcUnaryServiceInterface<IndexRequest, IndexReply> = (message: IndexRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<IndexReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<IndexReply>, callback?: grpc_1.requestCallback<IndexReply>): grpc_1.ClientUnaryCall => {
            return super.Index(message, metadata, options, callback);
        };
        Task: GrpcStreamServiceInterface<TaskRequest, TaskReply> = (message: TaskRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<TaskReply> => {
            return super.Task(message, metadata, options);
        };
    }
}
