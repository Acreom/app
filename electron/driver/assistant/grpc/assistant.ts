/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.4
 * source: assistant.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace com.acreom.assistant {
    export class QuickaddRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pm_bias?: boolean;
            fallback?: boolean;
            data?: string;
            ts?: string;
            date_format?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pm_bias" in data && data.pm_bias != undefined) {
                    this.pm_bias = data.pm_bias;
                }
                if ("fallback" in data && data.fallback != undefined) {
                    this.fallback = data.fallback;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("ts" in data && data.ts != undefined) {
                    this.ts = data.ts;
                }
                if ("date_format" in data && data.date_format != undefined) {
                    this.date_format = data.date_format;
                }
            }
        }
        get pm_bias() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set pm_bias(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get fallback() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set fallback(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ts() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ts(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get date_format() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set date_format(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            pm_bias?: boolean;
            fallback?: boolean;
            data?: string;
            ts?: string;
            date_format?: string;
        }): QuickaddRequest {
            const message = new QuickaddRequest({});
            if (data.pm_bias != null) {
                message.pm_bias = data.pm_bias;
            }
            if (data.fallback != null) {
                message.fallback = data.fallback;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.ts != null) {
                message.ts = data.ts;
            }
            if (data.date_format != null) {
                message.date_format = data.date_format;
            }
            return message;
        }
        toObject() {
            const data: {
                pm_bias?: boolean;
                fallback?: boolean;
                data?: string;
                ts?: string;
                date_format?: string;
            } = {};
            if (this.pm_bias != null) {
                data.pm_bias = this.pm_bias;
            }
            if (this.fallback != null) {
                data.fallback = this.fallback;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.ts != null) {
                data.ts = this.ts;
            }
            if (this.date_format != null) {
                data.date_format = this.date_format;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pm_bias != false)
                writer.writeBool(1, this.pm_bias);
            if (this.fallback != false)
                writer.writeBool(2, this.fallback);
            if (this.data.length)
                writer.writeString(3, this.data);
            if (this.ts.length)
                writer.writeString(4, this.ts);
            if (this.date_format.length)
                writer.writeString(5, this.date_format);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickaddRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickaddRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pm_bias = reader.readBool();
                        break;
                    case 2:
                        message.fallback = reader.readBool();
                        break;
                    case 3:
                        message.data = reader.readString();
                        break;
                    case 4:
                        message.ts = reader.readString();
                        break;
                    case 5:
                        message.date_format = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickaddRequest {
            return QuickaddRequest.deserialize(bytes);
        }
    }
    export class QuickaddReply extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [3], [4], [5], [6], [7]];
        constructor(data?: any[] | ({} & (({
            text?: string;
        }) | ({
            date?: string;
        }) | ({
            start?: string;
        }) | ({
            end?: string;
        }) | ({
            rrule?: string;
        }) | ({
            parsed_text?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
                if ("rrule" in data && data.rrule != undefined) {
                    this.rrule = data.rrule;
                }
                if ("parsed_text" in data && data.parsed_text != undefined) {
                    this.parsed_text = data.parsed_text;
                }
            }
        }
        get text() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set text(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_text() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_date() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get start() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set start(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_start() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get end() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set end(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_end() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get rrule() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set rrule(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
        }
        get has_rrule() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get parsed_text() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set parsed_text(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[5], value);
        }
        get has_parsed_text() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get _text() {
            const cases: {
                [index: number]: "none" | "text";
            } = {
                0: "none",
                1: "text"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _date() {
            const cases: {
                [index: number]: "none" | "date";
            } = {
                0: "none",
                3: "date"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _start() {
            const cases: {
                [index: number]: "none" | "start";
            } = {
                0: "none",
                4: "start"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _end() {
            const cases: {
                [index: number]: "none" | "end";
            } = {
                0: "none",
                5: "end"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _rrule() {
            const cases: {
                [index: number]: "none" | "rrule";
            } = {
                0: "none",
                6: "rrule"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _parsed_text() {
            const cases: {
                [index: number]: "none" | "parsed_text";
            } = {
                0: "none",
                7: "parsed_text"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            text?: string;
            date?: string;
            start?: string;
            end?: string;
            rrule?: string;
            parsed_text?: string;
        }): QuickaddReply {
            const message = new QuickaddReply({});
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.date != null) {
                message.date = data.date;
            }
            if (data.start != null) {
                message.start = data.start;
            }
            if (data.end != null) {
                message.end = data.end;
            }
            if (data.rrule != null) {
                message.rrule = data.rrule;
            }
            if (data.parsed_text != null) {
                message.parsed_text = data.parsed_text;
            }
            return message;
        }
        toObject() {
            const data: {
                text?: string;
                date?: string;
                start?: string;
                end?: string;
                rrule?: string;
                parsed_text?: string;
            } = {};
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.date != null) {
                data.date = this.date;
            }
            if (this.start != null) {
                data.start = this.start;
            }
            if (this.end != null) {
                data.end = this.end;
            }
            if (this.rrule != null) {
                data.rrule = this.rrule;
            }
            if (this.parsed_text != null) {
                data.parsed_text = this.parsed_text;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_text)
                writer.writeString(1, this.text);
            if (this.has_date)
                writer.writeString(3, this.date);
            if (this.has_start)
                writer.writeString(4, this.start);
            if (this.has_end)
                writer.writeString(5, this.end);
            if (this.has_rrule)
                writer.writeString(6, this.rrule);
            if (this.has_parsed_text)
                writer.writeString(7, this.parsed_text);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickaddReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickaddReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.text = reader.readString();
                        break;
                    case 3:
                        message.date = reader.readString();
                        break;
                    case 4:
                        message.start = reader.readString();
                        break;
                    case 5:
                        message.end = reader.readString();
                        break;
                    case 6:
                        message.rrule = reader.readString();
                        break;
                    case 7:
                        message.parsed_text = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuickaddReply {
            return QuickaddReply.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAcreomAssistantService {
        static definition = {
            Quickadd: {
                path: "/com.acreom.assistant.AcreomAssistant/Quickadd",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuickaddRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuickaddRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuickaddReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuickaddReply.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Quickadd(call: grpc_1.ServerUnaryCall<QuickaddRequest, QuickaddReply>, callback: grpc_1.sendUnaryData<QuickaddReply>): void;
    }
    export class AcreomAssistantClient extends grpc_1.makeGenericClientConstructor(UnimplementedAcreomAssistantService.definition, "AcreomAssistant", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Quickadd: GrpcUnaryServiceInterface<QuickaddRequest, QuickaddReply> = (message: QuickaddRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuickaddReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuickaddReply>, callback?: grpc_1.requestCallback<QuickaddReply>): grpc_1.ClientUnaryCall => {
            return super.Quickadd(message, metadata, options, callback);
        };
    }
}
